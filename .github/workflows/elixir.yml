name: Elixir CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  MIX_ENV: test
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  
permissions:
  contents: write

jobs:
  example_matrix:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        elixir: [1.13.4]
        otp: [24.3.4]
        
    name: Build and test
    steps:
    - uses: actions/checkout@v3

    - name: Set up Elixir
      uses: erlef/setup-beam@988e02bfe678367a02564f65ca2e37726dc0268f
      with:
        elixir-version: ${{ matrix.elixir }} # Define the elixir version [required]
        otp-version: ${{ matrix.otp }} # Define the OTP version [required]

    - name: Restore dependencies cache
      uses: actions/cache@v3
      id: mix-cache
      with:
        path: deps
        key: ${{ runner.os }}-${{ matrix.otp }}-${{ matrix.elixir }}-mix-${{ hashFiles(format('{0}{1}', github.workspace, '/mix.lock')) }}

    - name: Restore build cache
      id: build-cache
      uses: actions/cache@v1
      with:
        path: _build
        key: cache-${{ runner.os }}-dialyzer_build-${{ matrix.otp }}-${{ matrix.elixir }}-${{ hashFiles('**/mix.lock') }}

    - name: Install Mix Dependencies
      if: steps.mix-cache.outputs.cache-hit != 'true'
      run: |
        mix local.rebar --force
        mix local.hex --force
        mix deps.get

    - name: Compile
      if: steps.build-cache.outputs.cache-hit != 'true'
      env:
        MIX_ENV: test
      run: mix deps.compile; mix compile --force --warnings-as-errors

    - name: Check Formatting
      run: mix format --check-formatted

    - name: Run Credo
      run: mix credo --strict

    - name: Run tests
      run: mix test

    - name: Run coverage tool
      run: mix coveralls.github

    - name: Build docs
      uses: lee-dohm/generate-elixir-docs@v1

    - name: Publish to Pages
      uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./doc
