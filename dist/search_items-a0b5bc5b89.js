searchNodes=[{"doc":"Macro to create and validate PhxLocalizedRoutes configuration modules with convenience callbacks to fetch specific values. For maximum performance, most callbacks return precompiled values with precomputed additional data. When used with an app depending on Phoenix.LiveView it also creates a LiveHelper module. For information how to use see the Usage Guide","ref":"PhxLocalizedRoutes.html","title":"PhxLocalizedRoutes","type":"behaviour"},{"doc":"Return a list of unique values assigned to given key. Returns a list of tuples with unique combinations when a list of keys is given. Example iex&gt; ExampleWeb.LocalizedRoutes . assigned_values ( :locale ) [ &quot;en&quot; , &quot;nl&quot; ] iex&gt; ExampleWeb.LocalizedRoutes . assigned_values ( [ :locale , :locale ] ) [ { &quot;en&quot; , &quot;en-GB&quot; } , { &quot;nl&quot; , &quot;nl-NL&quot; } , { &quot;nl&quot; , &quot;nl_BE&quot; } ]","ref":"PhxLocalizedRoutes.html#c:assigned_values/1","title":"PhxLocalizedRoutes.assigned_values/1","type":"callback"},{"doc":"Returns the configuration with precomputed values and flattened scopes","ref":"PhxLocalizedRoutes.html#c:config/0","title":"PhxLocalizedRoutes.config/0","type":"callback"},{"doc":"Returns the scope of given scope helper","ref":"PhxLocalizedRoutes.html#c:get_scope/1","title":"PhxLocalizedRoutes.get_scope/1","type":"callback"},{"doc":"Returns the scopes in a flat structure","ref":"PhxLocalizedRoutes.html#c:scopes/0","title":"PhxLocalizedRoutes.scopes/0","type":"callback"},{"doc":"Returns the scopes in a nested structure","ref":"PhxLocalizedRoutes.html#c:scopes_nested/0","title":"PhxLocalizedRoutes.scopes_nested/0","type":"callback"},{"doc":"","ref":"PhxLocalizedRoutes.html#t:opts/0","title":"PhxLocalizedRoutes.opts/0","type":"type"},{"doc":"","ref":"PhxLocalizedRoutes.html#t:opts_scope/0","title":"PhxLocalizedRoutes.opts_scope/0","type":"type"},{"doc":"","ref":"PhxLocalizedRoutes.Fixtures.html","title":"PhxLocalizedRoutes.Fixtures","type":"module"},{"doc":"","ref":"PhxLocalizedRoutes.Fixtures.html#scopes/0","title":"PhxLocalizedRoutes.Fixtures.scopes/0","type":"function"},{"doc":"","ref":"PhxLocalizedRoutes.Fixtures.html#scopes_flat/0","title":"PhxLocalizedRoutes.Fixtures.scopes_flat/0","type":"function"},{"doc":"","ref":"PhxLocalizedRoutes.Fixtures.html#scopes_precomputed/0","title":"PhxLocalizedRoutes.Fixtures.scopes_precomputed/0","type":"function"},{"doc":"","ref":"PhxLocalizedRoutes.Fixtures.html#scopes_with_map_assign/0","title":"PhxLocalizedRoutes.Fixtures.scopes_with_map_assign/0","type":"function"},{"doc":"","ref":"PhxLocalizedRoutes.Fixtures.Assigns.html","title":"PhxLocalizedRoutes.Fixtures.Assigns","type":"module"},{"doc":"Helpers to be used in views and controllers.","ref":"PhxLocalizedRoutes.Helpers.html","title":"PhxLocalizedRoutes.Helpers","type":"module"},{"doc":"Marco used to wrap a Phoenix route and transform it into a localized route. The localized routes use the :scope_helper to alter the destination (alias) of the route on render. By default it uses the scope_helper from Phoenix.LiveView.Socket or Plug.Conn , keeping the user in it's current locale / scope. A custom :scope_helper can be provided through assigns in loc_opts . Example Routes . product_index_path ( @socket , :index ) / products loc_opts = %{ assigns : %{ scope_helper : &quot;eu_nl&quot; } } loc_route ( Routes . product_index_path ( @socket , :index ) , loc_opts ) / eu / nl / products When no :scope_helper is found or when no matching helper function is exported, an error is logged and the original link will be returned. Example: Generate links to all other localized routes of the product index &lt; ! -- ExampleWeb.LocalizedRoutes is aliased as Loc in view_helpers ( ) -- &gt; &lt; ! -- loc_route is imported from PhxLocalizedRoutes.Helpers -- &gt; &lt; % = for { slug , opts } &lt;- Loc . scopes ( ) , opts . assigns . scope_helper != @loc . scope_helper do % &gt; &lt; span &gt; &lt; % = link &quot; [ \#{ slug } ] &quot; , to : loc_route ( Routes . product_index_path ( @socket , :index ) , opts ) % &gt; &lt; / span &gt; &lt; % end % &gt;","ref":"PhxLocalizedRoutes.Helpers.html#loc_route/2","title":"PhxLocalizedRoutes.Helpers.loc_route/2","type":"macro"},{"doc":"Provides helpers for Phoenix LiveView applications Usage Instructions how to use this module can be found in the Usage Guide .","ref":"PhxLocalizedRoutes.LiveHelpers.html","title":"PhxLocalizedRoutes.LiveHelpers","type":"module"},{"doc":"Assigns custom assigns from the config into the socker under the :loc key. The configuration module is passed as the first argument. The assigns can used as @loc.my_custom_assign Used in PhxLocalizedRoutes.create_helper_module/2 See also: Phoenix.LiveView.on_mount/1","ref":"PhxLocalizedRoutes.LiveHelpers.html#on_mount/4","title":"PhxLocalizedRoutes.LiveHelpers.on_mount/4","type":"function"},{"doc":"Plug to put the scope helper in the session. The scope helper in the session can be used by PhxLocalizedRoutes.LiveHelpers.on_mount/4 to get the current scope assigns. Usage Instructions how to use this module can be found in the Usage Guide .","ref":"PhxLocalizedRoutes.Plug.html","title":"PhxLocalizedRoutes.Plug","type":"module"},{"doc":"Provides macro localize to generate localized and multilingual Phoenix routes with configurable assigns which can be used in Controllers and (Live)Views. Usage Instructions how to use this module can be found in the Usage Guide .","ref":"PhxLocalizedRoutes.Router.html","title":"PhxLocalizedRoutes.Router","type":"module"},{"doc":"Macro which creates an alternative Router Helpers module named [MyApp].Router.Helpers.Localized based on the original helper module generated by Phoenix ( [MyApp].Router.Helpers ). the new helper module is aliased as Routes ; making it a drop-in replacement. the original Router Helper module is aliased as OriginalRoutes . localised path and URL helpers are generated to support generating localised path and URLs. The localized helpers wrap the standard Phoenix helpers. Pseudo code def product_index_path ( arg1 , arg2 ) do PhxLocalizedRoutes.Helper . loc_route ( OriginalRoutes . product_index_path ( arg1 , arg2 ) , loc_opts ) end def product_index_path ( arg1 , arg2 , arg3 ) do PhxLocalizedRoutes.Helper . loc_route ( OriginalRoutes . product_index_path ( arg1 , arg2 , arg3 ) , loc_opts ) end [ ... ]","ref":"PhxLocalizedRoutes.Router.html#__using__/1","title":"PhxLocalizedRoutes.Router.__using__/1","type":"macro"},{"doc":"Generate localized routes and route helper modules. This module when use d , provides a localize/1 macro that is designed to wrap the standard Phoenix route macros such as get/3 , put/3 and live/3 in alternate scopes as defined in the config module. When a Gettext module is defined in the configuration, it is used to make route (URL) parts translatable / multilingual. Translations for the parts of a given route path are translated at compile-time which are then combined into a localised route that is added to the standard Phoenix routing framework. As a result, users can enter URLs using localised terms which can enhance user engagement and content relevance. =&gt; pl : produkty | edytowaÄ‡ / products / :id / edit =&gt; nl : producten | bewerken =&gt; es : producto | editar Similarly, localised path and URL helpers are generated that wrap the standard Phoenix helpers to supporting generating localised path and URLs.","ref":"PhxLocalizedRoutes.Router.html#localize/3","title":"PhxLocalizedRoutes.Router.localize/3","type":"macro"},{"doc":"Module to create and validate a Config struct","ref":"PhxLocalizedRoutes.Config.html","title":"PhxLocalizedRoutes.Config","type":"module"},{"doc":"","ref":"PhxLocalizedRoutes.Config.html#t:t/0","title":"PhxLocalizedRoutes.Config.t/0","type":"type"},{"doc":"Struct for flattened scope","ref":"PhxLocalizedRoutes.Scope.Flat.html","title":"PhxLocalizedRoutes.Scope.Flat","type":"module"},{"doc":"","ref":"PhxLocalizedRoutes.Scope.Flat.html#t:t/0","title":"PhxLocalizedRoutes.Scope.Flat.t/0","type":"type"},{"doc":"Struct for scope with optionally nested scopes","ref":"PhxLocalizedRoutes.Scope.Nested.html","title":"PhxLocalizedRoutes.Scope.Nested","type":"module"},{"doc":"","ref":"PhxLocalizedRoutes.Scope.Nested.html#t:t/0","title":"PhxLocalizedRoutes.Scope.Nested.t/0","type":"type"},{"doc":"","ref":"PhxLocalizedRoutes.Exceptions.html","title":"PhxLocalizedRoutes.Exceptions","type":"module"},{"doc":"Raised when the custom assigns of scopes do not have the same keys. %{ scopes : %{ &quot;/&quot; =&gt; %{ assigns : %{ key1 : 1 , key2 : 2 } } , &quot;/other&quot; =&gt; %{ assigns : %{ key1 : 1 } } # missing :key2 } }","ref":"PhxLocalizedRoutes.Exceptions.AssignsMismatchError.html","title":"PhxLocalizedRoutes.Exceptions.AssignsMismatchError","type":"exception"},{"doc":"Raised when gettext_module is set in the configuration but :locale is not set in the assigns. %{ scopes : %{ &quot;/&quot; =&gt; %{ assigns : %{ key1 : 1 } } , # missing :locale &quot;/other&quot; =&gt; %{ assigns : %{ key1 : 1 } } } , gettext_module : MyGettext }","ref":"PhxLocalizedRoutes.Exceptions.MissingLocaleAssignError.html","title":"PhxLocalizedRoutes.Exceptions.MissingLocaleAssignError","type":"exception"},{"doc":"Raised when the scope map does not start with the root scope &quot;/&quot;. %{ scopes : %{ &quot;/first&quot; =&gt; %{ assigns : %{ key1 : 1 } } , &quot;/other&quot; =&gt; %{ assigns : %{ key1 : 1 } } } , } To fix this, include a scope for the root &quot;/&quot;. ` %{ scopes : %{ &quot;/&quot; =&gt; %{ assigns : %{ level : 1 } scopes : &quot;/first&quot; =&gt; %{ assigns : %{ level : 2 } } , &quot;/other&quot; =&gt; %{ assigns : %{ level : 2 } } } , } }","ref":"PhxLocalizedRoutes.Exceptions.MissingRootSlugError.html","title":"PhxLocalizedRoutes.Exceptions.MissingRootSlugError","type":"exception"},{"doc":"Phoenix Localized Routes Localize your Phoenix website with multilingual URLs and custom template assigns; enhancing user engagement and content relevance. â‡’ / products / :id / edit @loc . locale = &quot;en_US&quot; / products / :id / edit â‡’ / nederland / producten / :id / bewerken @loc . locale = &quot;nl_NL&quot; â‡’ / espana / producto / :id / editar @loc . locale = &quot;es_ES&quot;","ref":"readme.html","title":"README","type":"extras"},{"doc":"URL format is customizable (no mandatory website.com/[locale]/page ) URL can matches language of content ; enhancing user engagement and content relevance. Less than 10 lines of code to change in existing applications. Includes helper functions to generate links to other locales. Supports custom assigns per scope/locale. No run-time performance penalty! Simple when possible, powerful where needed.","ref":"readme.html#top-features-and-benefits","title":"README - Top Features and Benefits","type":"extras"},{"doc":"Add a configuration file describing which alternate routes to generate. Replace less than 10 lines of code in your existing Phoenix application. Optionally: Run mix gettext.extract --merge . Translate the URL parts like any other translatable text. Run mix phx.routes to verify the result. You can now visit the localized URLs. Links and redirects in your application will automatically keep the visitors in their current (localized) scope.","ref":"readme.html#usage-summary","title":"README - Usage Summary","type":"extras"},{"doc":"HexDocs (stable) and GitHub Pages (development). We also provide an example application you can experiment with.","ref":"readme.html#documentation","title":"README - Documentation","type":"extras"},{"doc":"See the Usage Guide for the requirements and installation instructions.","ref":"readme.html#requirements-and-installation","title":"README - Requirements and Installation","type":"extras"},{"doc":"A high-level overview of Phoenix Localized Routes' main features. Routes This library provides a localize/1 macro designed to wrap all route macros such as get/3, put/3 and resources/3. It replicates routes for each scope configured in a LocalizedRoutes backend module. each configured scope may have nested scopes. each configured scope may have custom assigns. routes may be translated. routes are locale independent (no mandatory website.com/[locale]/ format) As a result, you have full control over the format, language and assigns of localized URLs. Route Helpers Phoenix Localized Routes creates locale aware replicas of the standard Phoenix helper functions to support auto-localized paths and URLs. It places those replicas in a new module named [MyAppWeb].Router.Helpers.Localized along with helpers for each locale to support linking to a specific locale. The new module is a drop-in replacement of the standard Phoenix Helper module. Simply replace the MyAppWeb.Router.Helpers, as: Routes alias by MyAppWeb.Router.Helpers.Localized, as: Routes in myapp_web.ex . As a result, all links to localized routes will respect the current scope of a visitor unless you decide otherwise. Multilingual Routes Phoenix Localized Routes extracts individual parts of a routes' path to a routes.po file for translation. At compile-time it combines the translated parts to create new routes. As a result, users can enter URLs using localized terms which can enhance user engagement and content relevance. Custom Assigns Each scope can specify custom assigns. The customs assigns are available in templates as @loc (e.g. @loc.support_email ). In order to set the custom assigns for use in views and templates, this lib includes a Conn.Plug module and a LiveView helper module with on_mount callback. The modules create a bridge to share assigns between Phoenix Views and Phoenix Live Views. As a result, using different assigns per locale is a matter of plug-and-play.","ref":"readme.html#working","title":"README - Working","type":"extras"},{"doc":"An example Phoenix app using translated routes and custom assigns is available at GitHub. git clone https://github.com/BartOtten/phoenix_localized_routes_example.git cd phoenix_localized_routes_example iex -S mix phx.server Once the application is running, have a look at the example page .","ref":"readme.html#example-application","title":"README - Example Application","type":"extras"},{"doc":"","ref":"usage.html","title":"Usage","type":"extras"},{"doc":"Elixir &gt;=1.11 Phoenix &gt;= 1.6.0 Phoenix LiveView &gt;= 0.16 (optional)","ref":"usage.html#requirements","title":"Usage - Requirements","type":"extras"},{"doc":"You can install this library by adding it to your list of dependencies in mix.exs : def deps do [ { :phoenix_localized_routes , &quot;~&gt; 0.1.0&quot; } ] end We pressed on making the installation as non-intrusive as possible. The following modules / files need changes.","ref":"usage.html#installation","title":"Usage - Installation","type":"extras"},{"doc":"Phoenix Localized Routes adds localization to the helpers created by Phoenix; no code changes in controllers and (live)views necessary. # file: lib/example_web/example_web.ex # in controller - alias ExampleWeb.Router.Helpers , as : Routes + unquote ( loc_helpers ( ) ) # in live_view + on_mount ( ExampleWeb.LocalizedRoutes.LiveHelpers ) # in router + import PhxLocalizedRoutes.Router + use PhxLocalizedRoutes.Router # in view_helpers - alias ExampleWeb.Router.Helpers , as : Routes + unquote ( loc_helpers ( ) ) # insert new private function + defp loc_helpers do + quote do + import PhxLocalizedRoutes.Helpers + alias ExampleWeb.Router.Helpers , as : OriginalRoutes + alias ExampleWeb.Router.Helpers.Localized , as : Routes + alias ExampleWeb.LocalizedRoutes , as : Loc + end + end # file: lib/example_web/router.ex # Add to browser pipeline + plug ( PhxLocalizedRoutes.Plug )","ref":"usage.html#helpers","title":"Usage - Helpers","type":"extras"},{"doc":"Create the module [MyAppWeb].LocalizedRoutes in the directory of your web application. The example shows a nested configuration using the default [MyAppWeb].Gettext module for multilingual URLs. It is possible to set: :scopes - scopes as map of maps, keys are used as URL segments (slugs). :gettext_module - Gettext module to extract URL segments and translate them. For each local scope you can set. :assign - a Map or Struct of values to assign to the Plug.Conn and/or Phoenix.Socket . When using a Map nested scopes inherit assigns from their parent. :scopes - nested scopes Assigns are namespaced with :loc . Templates can access them with @loc.{key_name} (e.g. @loc.contact ) Note using a Struct for :assign 's improves the developer experience. when using a Struct for assigns it should not be nested in the configuration module; but it can be in the same file as shown in the example. when a Gettext module is provided, the assigns must include a value for :locale . During compilation the configuration is validated. # file /lib/example_web/localized_routes.ex # This example uses a `Struct` for assign, so there is no assign inheritance; # only struct defaults. When using maps, nested scopes will inherit key/values # from their parent. defmodule ExampleWeb.LocalizedRoutes.Assigns do @moduledoc false defstruct [ :contact , locale : &quot;en&quot; ] end defmodule ExampleWeb.LocalizedRoutes do alias Exampleeb.LocalizedRoutes.Assigns use PhxLocalizedRoutes , scopes : % { &quot;/&quot; =&gt; % { assign : % Assigns { contact : &quot;root@example.com&quot; } , scopes : %{ &quot;/europe&quot; =&gt; %{ assign : % Assigns { contact : &quot;europe@example.com&quot; } , scopes : %{ &quot;/nl&quot; =&gt; %{ assigns : % Assigns { locale : &quot;nl&quot; , contact : &quot;verkoop@example.nl&quot; } } , &quot;/be&quot; =&gt; %{ assigns : % Assigns { locale : &quot;nl&quot; , contact : &quot;handel@example.be&quot; } } } } , &quot;/gb&quot; =&gt; %{ assign : % Assigns { contact : &quot;sales@example.com&quot; } } } , gettext_module : ExampleWeb.Gettext end Note Your visitors may prefer another locale than the one set for the route they landed on. Libraries like Cldr.Plug.SetLocale can detect their preferences. You can combine the value set by the route and the value set by a third party library to detect mismatches and guide your visitors accordingly.","ref":"usage.html#configuration","title":"Usage - Configuration","type":"extras"},{"doc":"Wrap the routes within the scope in an localized block, providing your created LocalizedRoutes module as argument. # file: router.ex scope &quot;/&quot; , ExampleWeb do + localize ExampleWeb.LocalizedRoutes do [ ... routes ] + end end","ref":"usage.html#wrapping-routes","title":"Usage - Wrapping routes","type":"extras"},{"doc":"Run mix gettext.merge priv/gettext --locale {locale} to create a locales' folder Run mix gettext.extract --merge after you updated routes. Now, we have created new routes PO file in our structure: web_app / priv / gettext â”” â”€ nl | â”” â”€ LC_MESSAGES | | â”” â”€ default . po | | â”” â”€ errors . po | | â”” â”€ routes . po &lt;- -- - new! â”” â”€ en | â”” â”€ LC_MESSAGES | | â”” â”€ default . po | | â”” â”€ errors . po | | â”” â”€ routes . po &lt;- -- - new! â”” â”€ default . pot â”” â”€ errors . pot â”” â”€ routes . pot &lt;- -- - new! You can translate the route segments in the .po -file and recompile the Router module to generate the new multilingual routes. Finally, Phoenix Localized Routes is able to recompile routes whenever PO files change. To enable this feature, the :gettext compiler needs to be added to the list of Mix compilers. In mix.exs: def project do [ compilers : [ :gettext ] ++ Mix . compilers , ] end","ref":"usage.html#extract-translatable-segments-into-routes-po-files","title":"Usage - Extract translatable segments into routes.po files","type":"extras"},{"doc":"","ref":"changelog.html","title":"Changelog","type":"extras"},{"doc":"1. Enhancements Added typespecs Modules split for better test experience 2.Bugfixes Fix errors reported by Dialyzer 3. Breaking Changes Helpers.loc_route requires :loc_opts of type Scope.Flat.t() | nil","ref":"changelog.html#0-1-1","title":"Changelog - 0.1.1","type":"extras"},{"doc":"Initial release","ref":"changelog.html#0-1-0","title":"Changelog - 0.1.0","type":"extras"}]